{"version":3,"sources":["components/Navbar.js","components/Banner.js","utils/API.js","components/Container.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Banner","axios","get","Container","props","fluid","Directory","useState","results","search","directory","setDirectory","useEffect","API","then","res","data","catch","err","console","log","map","result","key","id","value","src","picture","thumbnail","alt","name","first","last","phone","email","dob","date","substring","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qQAUeA,MARf,WACI,OACA,yBAAKC,UAAU,gCACX,0BAAMA,UAAU,wBAAhB,wBCQOC,MAXf,WACI,OACI,yBAAKD,UAAU,6BACf,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,qBACA,uBAAGA,UAAU,QAAb,+D,yBCLG,EACG,WACV,OAAOE,IAAMC,IAAI,kDCEVC,MAJf,SAAmBC,GACjB,OAAO,uCAAKL,UAAS,mBAAcK,EAAMC,MAAQ,SAAW,KAAUD,KC2CzDE,EAxCG,WAAO,IAAD,EACcC,mBAAS,CACvCC,QAAS,GACTC,OAAQ,KAHQ,mBACbC,EADa,KACFC,EADE,KAapB,OANAC,qBAAU,WACNC,IACCC,MAAK,SAAAC,GAAG,OAAIJ,EAAa,CAAEH,QAASO,EAAIC,KAAKR,aAC7CS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,IAGC,6BACI,kBAAC,EAAD,KACCR,EAAUF,QAAQa,KAAI,SAAAC,GAAM,OACzB,yBAAKvB,UAAU,MAAMwB,IAAKD,EAAOE,GAAGC,OAChC,yBAAK1B,UAAU,oBACX,yBAAK2B,IAAKJ,EAAOK,QAAQC,UAAWC,IAAKP,EAAOQ,KAAKC,SAEzD,yBAAKhC,UAAU,eACVuB,EAAOQ,KAAKC,MADjB,IACyBT,EAAOQ,KAAKE,MAErC,yBAAKjC,UAAU,gBACVuB,EAAOW,OAEZ,yBAAKlC,UAAU,gBACVuB,EAAOY,OAEZ,yBAAKnC,UAAU,cACVuB,EAAOa,IAAIC,KAAKC,UAAU,EAAG,YCrBvCC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.6308e65a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n        <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\r\n    </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction Banner() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n            <h1 className=\"display-4\">Company Directory</h1>\r\n            <p className=\"lead\">Note: information on here is classified as confidential.</p>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Banner;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n    getEmployees: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\r\n    }\r\n}","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Container;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Container from \"./Container\";\r\n\r\n\r\n\r\nconst Directory = () => {\r\n    const [directory, setDirectory] = useState({\r\n        results: [],\r\n        search: \"\"\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        API.getEmployees()\r\n        .then(res => setDirectory({ results: res.data.results }))\r\n        .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n            {directory.results.map(result => (\r\n                <div className=\"row\" key={result.id.value}>\r\n                    <div className=\"col-sm thumbnail\">\r\n                        <img src={result.picture.thumbnail} alt={result.name.first}></img>\r\n                    </div>\r\n                    <div className=\"col-sm name\">\r\n                        {result.name.first} {result.name.last}\r\n                    </div>\r\n                    <div className=\"col-sm phone\">\r\n                        {result.phone}\r\n                    </div>\r\n                    <div className=\"col-sm email\">\r\n                        {result.email}\r\n                    </div>\r\n                    <div className=\"col-sm dob\">\r\n                        {result.dob.date.substring(0, 10)}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            </Container>\r\n        </div>\r\n        )\r\n};\r\n\r\nexport default Directory;","import React from \"react\";\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\nimport Banner from \"./components/Banner\";\nimport Directory from \"./components/Directory\"\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Banner />\n      <Directory />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}